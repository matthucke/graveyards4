require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe CountiesController do

  # This should return the minimal set of attributes required to create a valid
  # County. As you add validations to County, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {
      name: "Pangaea",
      state: FactoryGirl.create(:illinois) }
  }
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CountiesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "has no index" do
      get :index, {}, valid_session
      expect(response.status).to eq 302
      expect(response).to redirect_to '/graveyards'
    end
  end

  describe "GET show" do
    before do
      @county = FactoryGirl.create(:pangaea)
      9.times {
        @county.graveyards << create(:graveyard, :county=>@county)
      }
    end

    it "assigns the requested county as @county" do
      get :show, {:state => @county.state.path, :county=>@county.path}, valid_session
      expect(request.path).to be == '/Illinois/Pangaea'
      expect(assigns :county).to be == @county
    end

    it "assigns graveyards" do
      get :show, {:state => @county.state.path, :county=>@county.path}, valid_session
      expect(assigns(:graveyards)).to_not be_nil
      expect(assigns(:graveyards).length).to be == 9
    end

    context "with a user" do
      before {
        @user = FactoryGirl.create(:user)
        session[:identity_id] = @user.identities.first.id
      }

      it "sets user" do
        get :show, {:state => @county.state.path, :county=>@county.path}, valid_session
        expect(assigns :current_user).to be == @user
      end

      it "sets visits" do
        get :show, {:state => @county.state.path, :county=>@county.path}, valid_session
        expect(assigns(:visits)).to_not be_nil
        expect(assigns(:visits)).to be_kind_of(UserVisitsCollection)
        expect(assigns(:visits).visits).to be_kind_of(Hash)
      end
    end

  end

end
